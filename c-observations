
---Типове:

Могат да бъдат signed и unsigned (напр. unsigned char):
char		1B
short		2B
int		2B или 4B
long		4B или 8B
long long	8B

Не можем да си избираме signed или unsigned :/
float		4B
double		8B

За да не трябва да се чудим на текущата архитектура колко byte-a е някой тип, 
в <stdint.h> имаме дефинирани типове, които ни гарантират определен размер:

(u)int8_t	1B
(u)int16_t	2B
(u)int32_t 	4B
(u)int64_t	8B


---Pointers - 'сочат' място в паметта (някакъв адрес)

Например:
uint8_t value = 10;
uint8_t *ptr = &value; // взимаме адреса на value и го assign-ваме на ptr. ptr вече има стойност адреса на value

Oще примери:
uint32_t *int_pointer; --> sizeof(int_pointer) == 4B (на 32 битов процесор) или 8B (на 64 битов процесор)
uint8_t *char_pointer; --> sizeof(char_pointer) == 4B (на 32 битов процесор) или 8B (на 64 битов процесор)

Тъй като пойнтърите са си адреси, размерът им не се мени от типа, към който сочат

Задачка:
Направете си един for по uint8_t i от 1 до 20, който да записва стойностите на i във файл (man. Отворете този файл с xxd
Пробвайте същото, само че for по uint32_t. Ще забележим, че само най-левият от изредените байтове за съответен uint32_t се променя (при little endian архитектура, в паметта подредбата е от least significant byte към most significant byte. T.e. на адрес 0 ще имаме най-малко значителния байт, на 1 малко по-значителния, на 2 ..., на 3 най-значителния)


---Дереференция - начин да получим стойността на соченото от пойнтъра

uint32_t sumthing = 10;
uint32_t *ptr_to_smth = &sumthing; // &sumthing ни дава адреса на sumthing, както по-горе

printf("%d", *ptr_to_smth) --> ни принтва 10 (a.k.a. стойността на sumthing)
// *ptr_to_smth дереферира пойнтъра ptr_to_smth

сега ако кажем:
sumthing = 420;
printf("%d", *ptr_to_smth) --> ни принтва 420 (понеже sumthing се е променило в паметта, но си е на същия адрес)

Когато дереферираме, получаваме стойност от тип, към какъвто пойнтърът сочи

uint32_t *int_pointer --> sizeof(*int_pointer) == 4B
uint8_t *char_pointer --> sizeof(*char_pointer) == 1B


